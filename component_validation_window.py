#!/usr/bin/env python3
"""
Fen√™tre de validation des composants avant g√©n√©ration des SKU
"""

import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
from pathlib import Path
from typing import Dict, List
from sku_generator import Component, SKUGenerator


class ComponentValidationWindow:
    """Fen√™tre pour valider et s√©lectionner les composants avant g√©n√©ration des SKU"""

    def __init__(self, parent, components_data: Dict[str, List[Component]], file_path: str, callback=None):
        self.parent = parent
        self.components_data = components_data
        self.file_path = file_path
        self.callback = callback
        self.selected_components = {}  # Stocker les composants s√©lectionn√©s
        self.component_vars = {}  # Variables de checkbox
        self.sku_generator = SKUGenerator()  # Pour l'aper√ßu des SKU

        # Cr√©er la fen√™tre
        self.window = tk.Toplevel(parent)
        self.window.title("Validation des Composants - G√©n√©ration SKU")
        self.window.geometry("1200x800")
        self.window.transient(parent)
        self.window.grab_set()  # Modal

        # Initialiser les composants s√©lectionn√©s (tous par d√©faut)
        for domain, components in components_data.items():
            self.selected_components[domain] = components.copy()

        self.create_widgets()
        self.populate_components()

        # Centrer la fen√™tre
        self.center_window()

    def center_window(self):
        """Centrer la fen√™tre sur l'√©cran"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")

    def create_widgets(self):
        """Cr√©er l'interface de validation"""

        # En-t√™te
        header_frame = ttk.Frame(self.window)
        header_frame.pack(fill=tk.X, padx=10, pady=5)

        ttk.Label(header_frame, text="üîç Validation des Composants",
                 font=("Arial", 16, "bold")).pack()
        ttk.Label(header_frame, text=f"Fichier: {Path(self.file_path).name}",
                 font=("Arial", 10)).pack()
        ttk.Label(header_frame, text="Cliquez sur les lignes pour s√©lectionner/d√©s√©lectionner les composants",
                 font=("Arial", 10, "italic")).pack(pady=5)

        # Frame pour les statistiques
        stats_frame = ttk.LabelFrame(self.window, text="Statistiques")
        stats_frame.pack(fill=tk.X, padx=10, pady=5)

        self.stats_label = ttk.Label(stats_frame, text="", font=("Arial", 10))
        self.stats_label.pack(pady=5)

        # Notebook pour les onglets par domaine (retour √† l'interface simple)
        self.notebook = ttk.Notebook(self.window)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Frame pour les boutons
        button_frame = ttk.Frame(self.window)
        button_frame.pack(fill=tk.X, padx=10, pady=10)

        # Boutons de s√©lection globale
        ttk.Button(button_frame, text="‚úÖ Tout s√©lectionner",
                  command=self.select_all).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå Tout d√©s√©lectionner",
                  command=self.deselect_all).pack(side=tk.LEFT, padx=5)

        # Spacer
        ttk.Label(button_frame, text="").pack(side=tk.LEFT, expand=True)

        # Boutons d'action
        ttk.Button(button_frame, text="‚ùå Annuler",
                  command=self.cancel).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="‚úÖ G√©n√©rer les SKU",
                  command=self.confirm, style="Accent.TButton").pack(side=tk.RIGHT, padx=5)

    def populate_components(self):
        """Remplir les onglets avec les composants"""

        for domain, components in self.components_data.items():
            if not components:
                continue

            # Cr√©er l'onglet pour ce domaine
            tab_frame = ttk.Frame(self.notebook)
            self.notebook.add(tab_frame, text=f"{domain} ({len(components)})")

            # Cr√©er le treeview avec scrollbars
            tree_frame = ttk.Frame(tab_frame)
            tree_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

            # Treeview
            columns = ("S√©lection", "Nom", "Description", "Type", "Domaine", "Fabricant", "SKU Aper√ßu")
            tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=20)

            # Colonnes
            tree.heading("S√©lection", text="‚úì")
            tree.heading("Nom", text="Nom du Composant")
            tree.heading("Description", text="Description")
            tree.heading("Type", text="Type")
            tree.heading("Domaine", text="Domaine")
            tree.heading("Fabricant", text="Fabricant")
            tree.heading("SKU Aper√ßu", text="SKU qui sera g√©n√©r√©")

            # Largeur des colonnes
            tree.column("S√©lection", width=50, anchor=tk.CENTER)
            tree.column("Nom", width=180)
            tree.column("Description", width=200)
            tree.column("Type", width=120)
            tree.column("Domaine", width=70, anchor=tk.CENTER)
            tree.column("Fabricant", width=120)
            tree.column("SKU Aper√ßu", width=200, anchor=tk.CENTER)

            # Scrollbars
            v_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=tree.yview)
            h_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL, command=tree.xview)
            tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

            # Pack scrollbars et tree
            tree.grid(row=0, column=0, sticky="nsew")
            v_scrollbar.grid(row=0, column=1, sticky="ns")
            h_scrollbar.grid(row=1, column=0, sticky="ew")
            tree_frame.grid_columnconfigure(0, weight=1)
            tree_frame.grid_rowconfigure(0, weight=1)

            # Stocker la r√©f√©rence au tree pour ce domaine
            setattr(self, f"tree_{domain.lower()}", tree)

            # Variables pour les checkboxes et remplissage
            domain_vars = {}

            for i, component in enumerate(components):
                item_id = f"{domain}_{i}"

                # G√©n√©rer un aper√ßu du SKU
                try:
                    sku_preview = self.sku_generator.generate_sku(component)
                except Exception:
                    sku_preview = "‚ùå Erreur"

                # Variable de checkbox (coch√©e par d√©faut)
                var = tk.BooleanVar(value=True)
                domain_vars[item_id] = var

                # Ins√©rer dans le treeview
                tree.insert("", tk.END, iid=item_id, values=(
                    "‚úì",  # S√©lection
                    component.name or "N/A",
                    component.description or "N/A",
                    component.component_type or "N/A",
                    component.domain,
                    component.manufacturer or "N/A",
                    sku_preview
                ))

                # Marquer la ligne comme s√©lectionn√©e
                tree.set(item_id, "S√©lection", "‚úì")

            # Stocker les variables pour ce domaine
            self.component_vars[domain] = domain_vars

            # Bind pour les clics (corriger le probl√®me de s√©lection)
            tree.bind("<Button-1>", lambda e, d=domain: self.on_tree_click(e, d))
            tree.bind("<Double-1>", lambda e, d=domain: self.show_component_details(d, e))

        self.update_stats()

    def on_tree_click(self, event, domain):
        """G√©rer les clics sur le treeview"""
        tree = getattr(self, f"tree_{domain.lower()}")

        # Identifier l'√©l√©ment cliqu√©
        item = tree.identify_row(event.y)
        column = tree.identify_column(event.x)

        if item and item in self.component_vars[domain]:
            # Toggle la s√©lection
            current_value = self.component_vars[domain][item].get()
            new_value = not current_value
            self.component_vars[domain][item].set(new_value)

            # Mettre √† jour l'affichage
            if new_value:
                tree.set(item, "S√©lection", "‚úì")
                tree.item(item, tags=())
            else:
                tree.set(item, "S√©lection", "‚ùå")
                tree.item(item, tags=("deselected",))
                tree.tag_configure("deselected", background="#f0f0f0", foreground="#666666")

            self.update_stats()

            # Emp√™cher la s√©lection par d√©faut du treeview
            return "break"

    def toggle_selection(self, item_id):
        """Basculer la s√©lection d'un composant (m√©thode h√©rit√©e pour compatibilit√©)"""
        domain = item_id.split("_")[0]

        if item_id in self.component_vars[domain]:
            current_value = self.component_vars[domain][item_id].get()
            new_value = not current_value
            self.component_vars[domain][item_id].set(new_value)

            # Mettre √† jour l'affichage
            tree = getattr(self, f"tree_{domain.lower()}")
            tree.set(item_id, "S√©lection", "‚úì" if new_value else "‚ùå")

            # Changer la couleur de fond
            if new_value:
                tree.item(item_id, tags=())
            else:
                tree.item(item_id, tags=("deselected",))
                tree.tag_configure("deselected", background="#f0f0f0", foreground="#666666")

            self.update_stats()

    def select_all(self):
        """S√©lectionner tous les composants"""
        for domain, domain_vars in self.component_vars.items():
            tree = getattr(self, f"tree_{domain.lower()}")
            for item_id, var in domain_vars.items():
                var.set(True)
                tree.set(item_id, "S√©lection", "‚úì")
                tree.item(item_id, tags=())
        self.update_stats()

    def deselect_all(self):
        """D√©s√©lectionner tous les composants"""
        for domain, domain_vars in self.component_vars.items():
            tree = getattr(self, f"tree_{domain.lower()}")
            for item_id, var in domain_vars.items():
                var.set(False)
                tree.set(item_id, "S√©lection", "‚ùå")
                tree.item(item_id, tags=("deselected",))
                tree.tag_configure("deselected", background="#f0f0f0", foreground="#666666")
        self.update_stats()

    def update_stats(self):
        """Mettre √† jour les statistiques"""
        total_components = 0
        selected_components = 0

        stats_by_domain = {}

        for domain, domain_vars in self.component_vars.items():
            domain_total = len(domain_vars)
            domain_selected = sum(var.get() for var in domain_vars.values())

            total_components += domain_total
            selected_components += domain_selected
            stats_by_domain[domain] = (domain_selected, domain_total)

        # Cr√©er le texte des statistiques
        stats_text = f"Total: {selected_components}/{total_components} composants s√©lectionn√©s"

        for domain, (selected, total) in stats_by_domain.items():
            stats_text += f" | {domain}: {selected}/{total}"

        self.stats_label.config(text=stats_text)

    def show_component_details(self, domain, event):
        """Afficher les d√©tails d'un composant"""
        tree = getattr(self, f"tree_{domain.lower()}")
        selection = tree.selection()

        if selection:
            item_id = selection[0]
            idx = int(item_id.split("_")[1])
            component = self.components_data[domain][idx]

            # Fen√™tre de d√©tails
            detail_window = tk.Toplevel(self.window)
            detail_window.title("D√©tails du Composant")
            detail_window.geometry("500x400")
            detail_window.transient(self.window)

            # Contenu
            text_widget = tk.Text(detail_window, wrap=tk.WORD, padx=10, pady=10)
            text_widget.pack(fill=tk.BOTH, expand=True)

            details = f"""
üîß D√âTAILS DU COMPOSANT

Nom: {component.name or 'N/A'}
Description: {component.description or 'N/A'}
Domaine: {component.domain}
Type: {component.component_type or 'N/A'}
Route: {component.route or 'Automatique'}
Routing: {component.routing or 'Automatique'}
Fabricant: {component.manufacturer or 'N/A'}
R√©f√©rence fabricant: {component.manufacturer_part or 'N/A'}
Quantit√©: {component.quantity or 'N/A'}
D√©signateur: {component.designator or 'N/A'}
"""
            text_widget.insert(tk.END, details)
            text_widget.config(state=tk.DISABLED)

    def get_selected_components(self) -> Dict[str, List[Component]]:
        """Obtenir les composants s√©lectionn√©s"""
        selected = {}

        for domain, domain_vars in self.component_vars.items():
            selected_list = []

            for item_id, var in domain_vars.items():
                if var.get():  # Si s√©lectionn√©
                    idx = int(item_id.split("_")[1])
                    selected_list.append(self.components_data[domain][idx])

            if selected_list:
                selected[domain] = selected_list

        return selected

    def confirm(self):
        """Confirmer la s√©lection et proc√©der √† la g√©n√©ration"""
        selected = self.get_selected_components()

        # V√©rifier qu'au moins un composant est s√©lectionn√©
        total_selected = sum(len(components) for components in selected.values())

        if total_selected == 0:
            messagebox.showwarning("Aucun composant s√©lectionn√©",
                                 "Veuillez s√©lectionner au moins un composant pour g√©n√©rer les SKU.")
            return

        # Confirmer l'action
        message = f"G√©n√©rer les SKU pour {total_selected} composants s√©lectionn√©s ?"
        if messagebox.askyesno("Confirmation", message):
            # Fermer la fen√™tre et ex√©cuter le callback
            self.window.destroy()
            if self.callback:
                self.callback(selected)

    def cancel(self):
        """Annuler la validation"""
        if messagebox.askyesno("Annuler", "√ätes-vous s√ªr de vouloir annuler ?"):
            self.window.destroy()
