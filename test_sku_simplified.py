#!/usr/bin/env python3
"""
Test du nouveau format SKU simplifi√© : FAMILLE-SOUS_FAMILLE-SEQUENCE
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sku_generator import SKUGenerator, Component

def test_new_simplified_format():
    """Test du nouveau format SKU simplifi√©"""
    print("üß™ Test du nouveau format SKU simplifi√©")
    print("=" * 50)

    # Initialiser le g√©n√©rateur
    generator = SKUGenerator("test_sku_simplified.db")

    # Cr√©er des composants test
    test_components = [
        Component(
            name="Vis M6x20 INOX",
            description="Vis √† t√™te hexagonale en acier inoxydable",
            domain="MECA",
            component_type="BOULONNERIE",
            route="",  # Ces champs ne seront plus utilis√©s
            routing=""
        ),
        Component(
            name="R√©sistance 10kŒ©",
            description="R√©sistance de pr√©cision 1%",
            domain="ELEC",
            component_type="R√©sistances",
            route="",
            routing=""
        ),
        Component(
            name="Pi√®ce pli√©e support",
            description="Support m√©tallique pli√©",
            domain="MECA",
            component_type="Pi√®ces Pli√©es",
            route="",
            routing=""
        ),
        Component(
            name="Connecteur RJ45",
            description="Connecteur Ethernet Cat6",
            domain="ELEC",
            component_type="Connecteurs",
            route="",
            routing=""
        )
    ]

    print("\nüìã G√©n√©ration des SKU simplifi√©s :")
    print("-" * 30)

    generated_skus = []
    for component in test_components:
        try:
            sku = generator.generate_sku(component)
            generated_skus.append(sku)
            print(f"‚úÖ {component.name[:25]:<25} ‚Üí {sku}")
        except Exception as e:
            print(f"‚ùå {component.name[:25]:<25} ‚Üí Erreur: {e}")

    print(f"\nüéØ R√©sultat : Format simplifi√© FAMILLE-SOUS_FAMILLE-SEQUENCE")
    print(f"   Ancien format : DOMAINE-ROUTE-ROUTING-TYPE-SEQUENCE (5 parties)")
    print(f"   Nouveau format: FAMILLE-SOUS_FAMILLE-SEQUENCE (3 parties)")

    # Test du d√©codage
    print("\nüîç Test de d√©codage des SKU :")
    print("-" * 30)

    for sku in generated_skus:
        decoded = generator.decode_sku_parts(sku)
        if decoded.get('format') == 'simplifie':
            print(f"‚úÖ {sku} ‚Üí {decoded['famille_nom']} - {decoded['sous_famille_nom']}")
        else:
            print(f"‚ùå {sku} ‚Üí Erreur de d√©codage")

    # Comparaison des longueurs
    print(f"\nüìè Comparaison des longueurs :")
    print("-" * 30)
    if generated_skus:
        exemple_nouveau = generated_skus[0]
        exemple_ancien = "MECA-BOLT-BOLT-VISSER-2222"  # Exemple ancien format

        print(f"   Ancien format : {exemple_ancien} ({len(exemple_ancien)} caract√®res)")
        print(f"   Nouveau format: {exemple_nouveau} ({len(exemple_nouveau)} caract√®res)")
        reduction = len(exemple_ancien) - len(exemple_nouveau)
        print(f"   üìâ R√©duction : {reduction} caract√®res ({reduction/len(exemple_ancien)*100:.1f}%)")

    print(f"\n‚ú® Test termin√© avec succ√®s!")
    return True

def test_backward_compatibility():
    """Test de r√©trocompatibilit√© avec l'ancien format"""
    print("\nüîÑ Test de r√©trocompatibilit√©")
    print("=" * 50)

    generator = SKUGenerator("test_sku_simplified.db")

    # Test avec un ancien SKU
    ancien_sku = "ELEC-ASS-ASM-PLIAGE-AAAA"
    print(f"Test d√©codage ancien format: {ancien_sku}")

    decoded = generator.decode_sku_parts(ancien_sku)
    if decoded.get('format') == 'ancien':
        print(f"‚úÖ D√©codage ancien format r√©ussi")
        print(f"   Domaine: {decoded['domaine_nom']}")
        print(f"   Route: {decoded['route_nom']}")
        print(f"   Routing: {decoded['routing_nom']}")
        print(f"   Type: {decoded['type_nom']}")
    else:
        print(f"‚ùå Erreur d√©codage ancien format")

    # Test avec le nouveau format
    nouveau_sku = "ELEC-RESIST-2222"
    print(f"\nTest d√©codage nouveau format: {nouveau_sku}")

    decoded = generator.decode_sku_parts(nouveau_sku)
    if decoded.get('format') == 'simplifie':
        print(f"‚úÖ D√©codage nouveau format r√©ussi")
        print(f"   Famille: {decoded['famille_nom']}")
        print(f"   Sous-famille: {decoded['sous_famille_nom']}")
    else:
        print(f"‚ùå Erreur d√©codage nouveau format")

if __name__ == "__main__":
    print("üöÄ Test du g√©n√©rateur SKU simplifi√©")
    print("Nouveau format : FAMILLE-SOUS_FAMILLE-SEQUENCE")
    print("=" * 60)

    try:
        test_new_simplified_format()
        test_backward_compatibility()

        print("\nüéâ Tous les tests r√©ussis !")
        print("\nüí° Avantages du nouveau format :")
        print("   ‚Ä¢ SKU plus courts et lisibles")
        print("   ‚Ä¢ Structure simplifi√©e : FAMILLE-SOUS_FAMILLE-SEQUENCE")
        print("   ‚Ä¢ R√©trocompatibilit√© avec l'ancien format")
        print("   ‚Ä¢ R√©duction significative de la longueur")

    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests : {e}")
        import traceback
        traceback.print_exc()
