#!/usr/bin/env python3
"""
Test de validation des composants pour √©viter la cr√©ation de SKU vides
"""

from sku_generator import SKUGenerator, Component
import logging

# Configuration du logging pour voir les messages
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def test_component_validation():
    """Test de la validation des composants"""
    print("üß™ TEST DE VALIDATION DES COMPOSANTS")
    print("=" * 50)
    
    generator = SKUGenerator()
    
    # Test 1: Composant valide
    print("\n1. ‚úÖ Test composant valide")
    valid_component = Component(
        name="R√©sistance 100Œ©",
        description="R√©sistance 1/4W 5%",
        domain="ELEC",
        component_type="R√©sistances",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(valid_component)
        print(f"   SKU g√©n√©r√©: {sku}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test 2: Nom vide
    print("\n2. ‚ùå Test nom vide")
    empty_name_component = Component(
        name="",
        description="Description valide",
        domain="ELEC",
        component_type="R√©sistances",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(empty_name_component)
        print(f"   ‚ö†Ô∏è SKU cr√©√© malgr√© nom vide: {sku}")
    except ValueError as e:
        print(f"   ‚úÖ Composant rejet√© correctement: {e}")
    except Exception as e:
        print(f"   ‚ùå Erreur inattendue: {e}")
    
    # Test 3: Nom invalide (nan)
    print("\n3. ‚ùå Test nom 'nan'")
    nan_component = Component(
        name="nan",
        description="Description valide",
        domain="ELEC",
        component_type="R√©sistances",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(nan_component)
        print(f"   ‚ö†Ô∏è SKU cr√©√© malgr√© nom 'nan': {sku}")
    except ValueError as e:
        print(f"   ‚úÖ Composant rejet√© correctement: {e}")
    
    # Test 4: Domaine invalide
    print("\n4. ‚ùå Test domaine invalide")
    invalid_domain_component = Component(
        name="Vis M6",
        description="Vis hexagonale",
        domain="INVALID",
        component_type="Boulonnerie",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(invalid_domain_component)
        print(f"   ‚ö†Ô∏è SKU cr√©√© malgr√© domaine invalide: {sku}")
    except ValueError as e:
        print(f"   ‚úÖ Composant rejet√© correctement: {e}")
    
    # Test 5: Type de composant vide
    print("\n5. ‚ùå Test type composant vide")
    empty_type_component = Component(
        name="Composant myst√®re",
        description="Description valide",
        domain="ELEC",
        component_type="",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(empty_type_component)
        print(f"   ‚ö†Ô∏è SKU cr√©√© malgr√© type vide: {sku}")
    except ValueError as e:
        print(f"   ‚úÖ Composant rejet√© correctement: {e}")
    
    # Test 6: Description vide (doit √™tre accept√© mais remplac√©)
    print("\n6. ‚ö†Ô∏è Test description vide (doit √™tre accept√©)")
    empty_desc_component = Component(
        name="Composant sans description",
        description="",
        domain="MECA",
        component_type="Boulonnerie",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(empty_desc_component)
        print(f"   ‚úÖ SKU g√©n√©r√© avec description par d√©faut: {sku}")
    except Exception as e:
        print(f"   ‚ùå Erreur inattendue: {e}")
    
    # Test 7: Espaces uniquement dans le nom
    print("\n7. ‚ùå Test nom avec espaces uniquement")
    spaces_component = Component(
        name="   ",
        description="Description valide",
        domain="ELEC",
        component_type="Condensateurs",
        route="",
        routing=""
    )
    
    try:
        sku = generator.generate_sku(spaces_component)
        print(f"   ‚ö†Ô∏è SKU cr√©√© malgr√© nom avec espaces: {sku}")
    except ValueError as e:
        print(f"   ‚úÖ Composant rejet√© correctement: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ TEST TERMIN√â")
    print("‚úÖ Les composants invalides doivent √™tre rejet√©s")
    print("‚ö†Ô∏è Les composants valides doivent g√©n√©rer un SKU")

if __name__ == "__main__":
    test_component_validation()
